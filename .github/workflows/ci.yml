name: CI

on:
  push:
    branches: [master, main, develop, feature/**]
    paths:
      - "src/**"
      - "tests/**"
      - "pyproject.toml"
      - "requirements*.txt"
      - ".github/workflows/**"
      - "ruff.toml"
      - ".ruff.toml"
      - "mypy.ini"
      - "setup.cfg"
      - "tox.ini"
      - "mkdocs.y*ml"
      - "docs/**"
  pull_request:
    paths:
      - "src/**"
      - "tests/**"
      - "pyproject.toml"
      - "requirements*.txt"
      - ".github/workflows/**"
      - "ruff.toml"
      - ".ruff.toml"
      - "mypy.ini"
      - "setup.cfg"
      - "tox.ini"
      - "mkdocs.y*ml"
      - "docs/**"
  workflow_dispatch:
    inputs:
      flake_hunt:
        description: "Run flake-hunt job (heavy: repeats + random order)"
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONUNBUFFERED: "1"

jobs:
  lint:
    name: Lint (ruff + black + mypy) [py${{ matrix.py }}]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        py: ["3.11", "3.12"]
    env:
      LINT_DEPS_HASH: >-
        ${{ hashFiles('pyproject.toml','ruff.toml','.ruff.toml','mypy.ini','setup.cfg') }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        id: py
        with:
          python-version: ${{ matrix.py }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Cache linters (ruff & mypy)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ruff
            .mypy_cache
          key: ${{ runner.os }}-py${{ steps.py.outputs.python-version }}-lintcache-${{ env.LINT_DEPS_HASH }}

      - run: python -m pip install --upgrade pip

      - run: pip install "ruff>=0.5" "black>=24.0" "mypy>=1.10" types-setuptools

      - name: Ruff (lint → JUnit)
        id: ruff
        run: |
          mkdir -p reports
          set +e
          ruff check src tests --output-format junit --output-file reports/ruff-junit-${{ matrix.py }}.xml
          echo "code=$?" >> "$GITHUB_OUTPUT"

      - name: Black (check → JUnit)
        id: black
        run: |
          mkdir -p reports
          set +e
          OUT=$(black --check --diff src tests 2>&1)
          CODE=$?
          echo "$OUT" > reports/black-output-${{ matrix.py }}.txt
          {
            echo '<?xml version="1.0" encoding="UTF-8"?>'
            if [ $CODE -eq 0 ]; then
              echo '<testsuite name="black" tests="1" failures="0" errors="0"><testcase classname="black" name="formatting"/></testsuite>'
            else
              echo '<testsuite name="black" tests="1" failures="1" errors="0">'
              echo '  <testcase classname="black" name="formatting">'
              echo '    <failure message="Black formatting issues"><![CDATA['
              cat reports/black-output-${{ matrix.py }}.txt
              echo '    ]]></failure>'
              echo '  </testcase>'
              echo '</testsuite>'
            fi
          } > reports/black-junit-${{ matrix.py }}.xml
          echo "code=$CODE" >> "$GITHUB_OUTPUT"

      - name: MyPy (type check → JUnit)
        id: mypy
        run: |
          mkdir -p reports
          set +e
          mypy src --junit-xml reports/mypy-junit-${{ matrix.py }}.xml
          echo "code=$?" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-reports-py${{ matrix.py }}
          path: reports/*
          if-no-files-found: warn

      - uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        continue-on-error: true
        with:
          files: "reports/*.xml"
          check_name: "Lint Results (py${{ matrix.py }})"
          comment_mode: ${{ github.event_name == 'pull_request' && 'always' || 'off' }}
          fail_on: nothing

      - name: Fail job if linters failed
        if: ${{ steps.ruff.outputs.code != '0' || steps.black.outputs.code != '0' || steps.mypy.outputs.code != '0' }}
        run: |
          echo "Linters failed:" >&2
          echo " ruff=${{ steps.ruff.outputs.code }}," \
               "black=${{ steps.black.outputs.code }}," \
               "mypy=${{ steps.mypy.outputs.code }}" >&2
          exit 1

  tests:
    name: Tests (pytest x10 + coverage) [py${{ matrix.py }}]
    needs: [lint]
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        py: ["3.11", "3.12"]
    env:
      PYTEST_RANDOMLY_SEED: ${{ github.run_number }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - run: python -m pip install --upgrade pip

      - name: Install project + test deps
        run: |
          if [ -f pyproject.toml ] && grep -q "\[project\.optional-dependencies\]" pyproject.toml; then
            pip install -e .[test]
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt && pip install -e .
          else
            pip install -e .
          fi
          pip install \
            "pytest>=8.0" \
            "pytest-asyncio>=0.23" \
            "pytest-repeat>=0.9" \
            "pytest-timeout>=2.3" \
            "pytest-randomly>=3.15" \
            "pytest-cov>=4.1"

      - name: Run tests + Coverage
        run: |
          mkdir -p reports
          pytest tests \
            --count=10 \
            --maxfail=0 \
            -ra -vv \
            --timeout=60 --timeout-method=thread \
            --durations=25 \
            --junitxml=reports/junit-${{ matrix.py }}.xml \
            --cov=src \
            --cov-report=xml:reports/coverage-${{ matrix.py }}.xml \
            --cov-report=term-missing

      - run: |
          python -m coverage html -d reports/htmlcov-${{ matrix.py }} || true
          python -m coverage report -m | tee reports/coverage-${{ matrix.py }}.txt

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-artifacts-py${{ matrix.py }}
          path: |
            reports/junit-${{ matrix.py }}.xml
            reports/coverage-${{ matrix.py }}.xml
            reports/coverage-${{ matrix.py }}.txt
            reports/htmlcov-${{ matrix.py }}
          if-no-files-found: warn

      - uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        continue-on-error: true
        with:
          files: "reports/junit-${{ matrix.py }}.xml"
          check_name: "Test Results (py${{ matrix.py }})"
          comment_mode: ${{ github.event_name == 'pull_request' && 'always' || 'off' }}
          fail_on: test failures

  security:
    name: Security (pip-audit + bandit)
    runs-on: ubuntu-latest
    timeout-minutes: 12
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - run: python -m pip install --upgrade pip

      - run: pip install -e . && pip install pip-audit bandit

      - name: pip-audit
        continue-on-error: true
        run: |
          mkdir -p reports
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt -f json -o reports/pip-audit.json || true
          else
            pip-audit -f json -o reports/pip-audit.json || true
          fi

      - name: bandit
        continue-on-error: true
        run: |
          mkdir -p reports
          bandit -q -r src -f json -o reports/bandit.json || true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: reports/*
          if-no-files-found: warn

  docs_check:
    name: Docs Build (strict)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
      - run: python -m pip install --upgrade pip
      - run: pip install mkdocs mkdocs-material mkdocstrings[python] ruff mike
      - run: mkdocs build --clean --strict
