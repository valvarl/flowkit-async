[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "flowkit"
version = "0.1.0"
description = "Flow orchestration toolkit: coordinator/worker with Kafka backplane"
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
authors = [{ name = "Flowkit authors" }]

# Runtime deps (stdlib modules like asyncio/json/... не указываем)
dependencies = [
  "aiokafka>=0.8.2",
  "pydantic>=2.5",
]

# Optional groups
[project.optional-dependencies]
test = [
  "pytest>=7.4",
  "pytest-asyncio>=0.23",
  "pytest-repeat>=0.9.4",
]
dev = [
  "ruff>=0.5",
  "black>=24.4",
  "mypy>=1.10",
  "coverage[toml]>=7.5",
  "pytest>=7.4",
  "pytest-asyncio>=0.23",
]

# Если когда-то появится CLI — добавьте здесь консольные скрипты
# [project.scripts]
# flowkit = "flowkit.__main__:main"

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]
include = ["flowkit*"]

# Упаковываем конфиги, чтобы они были доступны после установки
# Путь установки — <prefix>/share/flowkit
[tool.setuptools.data-files]
"share/flowkit" = [
  "configs/coordinator.default.json",
  "configs/worker.default.json",
]

# ── Pytest defaults ──────────────────────────────────────────
[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
  "ignore::DeprecationWarning",
]
markers = [
  "worker_types(name): override worker types for this test module",
  "use_handlers(names): restrict which test handlers to instantiate",
  "cfg(coord=None, worker=None): per-test Coordinator/Worker config overrides",
  "use_outbox: enable real Outbox dispatcher (no bypass)",
  "chaos: enable Kafka chaos mode (jitter/dup/drop) for this test",
]

# ── Ruff (линтер) ────────────────────────────────────────────
[tool.ruff]
target-version = "py312"
line-length = 120
extend-exclude = ["build", "dist"]
src = ["src", "tests"]

[tool.ruff.lint]
# Подборка полезных правил (без излишнего шума)
select = [
  "E",    # pycodestyle (errors)
  "F",    # pyflakes
  "I",    # isort (импорт-упорядочивание)
  "UP",   # pyupgrade
  "B",    # flake8-bugbear
  "ASYNC",# flake8-async
  "W",    # pycodestyle (warnings)
  "PERF", # perflint
  "RUF",  # ruff-specific
]
ignore = [
  "E203", # Совместимость с black по срезам
]

[tool.ruff.format]
# Мы используем black для форматирования; у ruff только lint.
quote-style = "preserve"

# ── Black (форматтер) ────────────────────────────────────────
[tool.black]
line-length = 120
target-version = ["py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | \.pytest_cache
  | build
  | dist
)/
'''

# ── MyPy (типизация) ────────────────────────────────────────
[tool.mypy]
python_version = "3.12"
# Не душим разработку: начинаем мягко, потом можно ужесточать
ignore_missing_imports = true
warn_unused_ignores = true
warn_return_any = true
show_error_codes = true
pretty = true
# Мы и так запускаем mypy только по src, но на всякий случай:
exclude = ["tests/"]

# ── Coverage (опционально) ───────────────────────────────────
[tool.coverage.run]
branch = true
source = ["flowkit"]

[tool.coverage.report]
show_missing = true
skip_covered = true
