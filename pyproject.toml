[build-system]
requires = ["setuptools>=68", "wheel", "setuptools_scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "flowkit"
dynamic = ["version"]
description = "Flow orchestration toolkit: coordinator/worker with Kafka backplane"
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
authors = [{ name = "Flowkit authors" }]

# Runtime dependencies
dependencies = [
  "anyio>=4.1",
  "aiokafka>=0.8.2",
  "pydantic>=2.5",
]

[project.optional-dependencies]
# Test-only dependencies
test = [
  "pytest>=7.4",
  "pytest-asyncio>=0.23",
  "pytest-repeat>=0.9.4",
]
# Development tooling (linters, type checking, coverage, etc.)
dev = [
  "ruff>=0.5",
  "black>=24.4",
  "mypy>=1.10",
  "coverage[toml]>=7.5",
  "pytest>=7.4",
  "pytest-asyncio>=0.23",
]

# [project.scripts]
# flowkit = "flowkit.__main__:main"

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]
include = ["flowkit*"]

# Install configuration files into <prefix>/share/flowkit
[tool.setuptools.data-files]
"share/flowkit" = [
  "configs/coordinator.default.json",
  "configs/worker.default.json",
]

# --------------------------------------------------------------------
# Pytest
# --------------------------------------------------------------------
[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = ["ignore::DeprecationWarning"]
markers = [
  "worker_types(name): override worker types for this test module",
  "use_handlers(names): restrict which test handlers to instantiate",
  "cfg(coord=None, worker=None): per-test Coordinator/Worker config overrides",
  "use_outbox: enable real Outbox dispatcher (no bypass)",
  "chaos: enable Kafka chaos mode (jitter/dup/drop) for this test",
]

# --------------------------------------------------------------------
# Ruff (lint)
# --------------------------------------------------------------------
[tool.ruff]
target-version = "py312"
line-length = 120
extend-exclude = ["build", "dist"]
src = ["src", "tests"]

[tool.ruff.lint]
select = [
  "E",     # pycodestyle (errors)
  "F",     # pyflakes
  "I",     # isort
  "UP",    # pyupgrade
  "B",     # flake8-bugbear
  "ASYNC", # flake8-async
  "W",     # pycodestyle (warnings)
  "PERF",  # perflint
  "RUF",   # ruff-specific
]
ignore = [
  "E203",  # keep compatibility with Black on slices
]

[tool.ruff.format]
# Black handles formatting; Ruff only lints.
quote-style = "preserve"

# --------------------------------------------------------------------
# Black (formatter)
# --------------------------------------------------------------------
[tool.black]
line-length = 120
target-version = ["py312"]
include = "\\.pyi?$"
exclude = '''
/(
    \.git
  | \.venv
  | \.pytest_cache
  | build
  | dist
)/
'''

# --------------------------------------------------------------------
# MyPy (type checking)
# --------------------------------------------------------------------
[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true
warn_unused_ignores = true
warn_return_any = true
show_error_codes = true
pretty = true
exclude = ["tests/"]

# --------------------------------------------------------------------
# Coverage
# --------------------------------------------------------------------
[tool.coverage.run]
branch = true
source = ["flowkit"]

[tool.coverage.report]
show_missing = true
skip_covered = true

[tool.setuptools_scm]
# Когда сидим между релизами, версия будет вида 0.1.0.devN+gHASH
version_scheme = "guess-next-dev"
local_scheme = "node-and-date"

# Сгенерируем файл с версией (удобно для рантайма)
write_to = "src/flowkit/_version.py"
write_to_template = "__all__ = ['__version__']\n__version__ = '{version}'\n"

# На всякий случай (если вдруг нет git или тегов)
fallback_version = "0.0.0"
