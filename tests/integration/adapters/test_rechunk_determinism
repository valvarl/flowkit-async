from __future__ import annotations
import math
import pytest
from tests.helpers.graph import make_graph, node_by_id, prime_graph, wait_task_finished
from tests.helpers.handlers import build_indexer_handler
from flowkit.core.log import log_context
from flowkit.worker.handlers.base import RoleHandler, BatchResult, Batch  # type: ignore

pytestmark = [pytest.mark.integration, pytest.mark.adapters, pytest.mark.worker_types("indexer,probe")]


class ProbeCounts(RoleHandler):
    role = "probe"
    async def process_batch(self, batch: Batch, ctx):
        items = (batch.payload or {}).get("items") or []
        return BatchResult(success=True, metrics={"count": len(items)})


@pytest.mark.asyncio
async def test_rechunk_without_meta_key_treats_each_artifact_as_one_item(env_and_imports, inmemory_db, coord, worker_factory, tlog):
    cd, _ = env_and_imports
    await worker_factory(("indexer", build_indexer_handler(db=inmemory_db)), ("probe", ProbeCounts()))

    total, batch = 9, 4  # -> 3 upstream partial artifacts (ceil)
    u = {"node_id": "u", "type": "indexer", "depends_on": [], "fan_in": "all",
         "io": {"input_inline": {"batch_size": batch, "total_skus": total}}, "status": None, "attempt_epoch": 0}
    probe = {"node_id": "probe", "type": "probe", "depends_on": ["u"], "fan_in": "all",
             "io": {"start_when": "first_batch",
                    "input_inline": {"input_adapter": "pull.from_artifacts.rechunk:size",
                                     "input_args": {"from_nodes": ["u"], "poll_ms": 15, "size": 3}  # ‚Üê no meta_list_key
                                     }},
             "status": None, "attempt_epoch": 0}

    g = prime_graph(cd, make_graph(nodes=[u, probe], edges=[("u", "probe")], agg={"after": "probe"}))
    tid = await coord.create_task(params={}, graph=g)
    with log_context(task_id=tid):
        tdoc = await wait_task_finished(inmemory_db, tid, timeout=8.0)
        # each chunk has 'items' length == 1; the total aggregated 'count' equals number of upstream batches
        expected = math.ceil(total / batch)
        got = int((node_by_id(tdoc, "probe").get("stats") or {}).get("count") or 0)
        assert got == expected
